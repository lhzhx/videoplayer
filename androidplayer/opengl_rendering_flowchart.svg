<svg width="1400" height="1000" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; fill: #2c3e50; }
      .phase-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #34495e; }
      .step { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .api { font-family: Consolas, monospace; font-size: 10px; fill: #e74c3c; font-weight: bold; }
      .data-flow { stroke: #3498db; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .process-flow { stroke: #27ae60; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .phase-bg { fill: #ecf0f1; stroke: #bdc3c7; stroke-width: 1; }
      .step-bg { fill: #ffffff; stroke: #34495e; stroke-width: 1; rx: 5; }
      .egl-bg { fill: #e8f5e8; stroke: #27ae60; stroke-width: 2; rx: 8; }
      .shader-bg { fill: #fff3cd; stroke: #ffc107; stroke-width: 2; rx: 8; }
      .texture-bg { fill: #e1ecf4; stroke: #0066cc; stroke-width: 2; rx: 8; }
      .render-bg { fill: #f8d7da; stroke: #dc3545; stroke-width: 2; rx: 8; }
      .yuv-bg { fill: #d1ecf1; stroke: #17a2b8; stroke-width: 2; rx: 8; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#3498db" />
    </marker>
  </defs>
  
  <!-- 标题 -->
  <text x="700" y="25" text-anchor="middle" class="title">Android OpenGL ES视频渲染流程图</text>
  
  <!-- 阶段1: EGL初始化 -->
  <rect x="50" y="50" width="1300" height="120" class="phase-bg"/>
  <text x="70" y="70" class="phase-title">阶段1: EGL初始化与上下文创建</text>
  
  <!-- EGL Display -->
  <rect x="100" y="85" width="180" height="75" class="egl-bg"/>
  <text x="190" y="105" text-anchor="middle" class="step">获取EGL显示连接</text>
  <text x="190" y="120" text-anchor="middle" class="api">eglGetDisplay()</text>
  <text x="190" y="135" text-anchor="middle" class="api">eglInitialize()</text>
  <text x="190" y="150" text-anchor="middle" class="step">EGL_DEFAULT_DISPLAY</text>
  
  <!-- EGL Config -->
  <rect x="300" y="85" width="180" height="75" class="egl-bg"/>
  <text x="390" y="105" text-anchor="middle" class="step">选择EGL配置</text>
  <text x="390" y="120" text-anchor="middle" class="api">eglChooseConfig()</text>
  <text x="390" y="135" text-anchor="middle" class="step">OpenGL ES 3.0</text>
  <text x="390" y="150" text-anchor="middle" class="step">8位RGB颜色</text>
  
  <!-- EGL Context -->
  <rect x="500" y="85" width="180" height="75" class="egl-bg"/>
  <text x="590" y="105" text-anchor="middle" class="step">创建OpenGL上下文</text>
  <text x="590" y="120" text-anchor="middle" class="api">eglCreateContext()</text>
  <text x="590" y="135" text-anchor="middle" class="step">EGL_CONTEXT_CLIENT_VERSION</text>
  <text x="590" y="150" text-anchor="middle" class="step">版本: 3</text>
  
  <!-- EGL Surface -->
  <rect x="700" y="85" width="180" height="75" class="egl-bg"/>
  <text x="790" y="105" text-anchor="middle" class="step">创建窗口表面</text>
  <text x="790" y="120" text-anchor="middle" class="api">eglCreateWindowSurface()</text>
  <text x="790" y="135" text-anchor="middle" class="api">eglMakeCurrent()</text>
  <text x="790" y="150" text-anchor="middle" class="step">ANativeWindow</text>
  
  <!-- 阶段2: 着色器初始化 -->
  <rect x="50" y="190" width="1300" height="140" class="phase-bg"/>
  <text x="70" y="210" class="phase-title">阶段2: 着色器程序编译与链接</text>
  
  <!-- Vertex Shader -->
  <rect x="100" y="225" width="200" height="95" class="shader-bg"/>
  <text x="200" y="245" text-anchor="middle" class="step">顶点着色器编译</text>
  <text x="200" y="260" text-anchor="middle" class="api">glCreateShader(GL_VERTEX_SHADER)</text>
  <text x="200" y="275" text-anchor="middle" class="api">glShaderSource()</text>
  <text x="200" y="290" text-anchor="middle" class="api">glCompileShader()</text>
  <text x="200" y="305" text-anchor="middle" class="step">处理顶点位置和纹理坐标</text>
  
  <!-- Fragment Shader -->
  <rect x="320" y="225" width="200" height="95" class="shader-bg"/>
  <text x="420" y="245" text-anchor="middle" class="step">片段着色器编译</text>
  <text x="420" y="260" text-anchor="middle" class="api">glCreateShader(GL_FRAGMENT_SHADER)</text>
  <text x="420" y="275" text-anchor="middle" class="api">glShaderSource()</text>
  <text x="420" y="290" text-anchor="middle" class="api">glCompileShader()</text>
  <text x="420" y="305" text-anchor="middle" class="step">YUV→RGB转换+水印叠加</text>
  
  <!-- Shader Program -->
  <rect x="540" y="225" width="200" height="95" class="shader-bg"/>
  <text x="640" y="245" text-anchor="middle" class="step">着色器程序链接</text>
  <text x="640" y="260" text-anchor="middle" class="api">glCreateProgram()</text>
  <text x="640" y="275" text-anchor="middle" class="api">glAttachShader()</text>
  <text x="640" y="290" text-anchor="middle" class="api">glLinkProgram()</text>
  <text x="640" y="305" text-anchor="middle" class="step">删除单独着色器对象</text>
  
  <!-- 阶段3: 纹理初始化 -->
  <rect x="50" y="350" width="1300" height="120" class="phase-bg"/>
  <text x="70" y="370" class="phase-title">阶段3: YUV纹理对象创建与配置</text>
  
  <!-- Y Texture -->
  <rect x="100" y="385" width="150" height="75" class="texture-bg"/>
  <text x="175" y="405" text-anchor="middle" class="step">Y分量纹理(亮度)</text>
  <text x="175" y="420" text-anchor="middle" class="api">glGenTextures()</text>
  <text x="175" y="435" text-anchor="middle" class="api">glBindTexture()</text>
  <text x="175" y="450" text-anchor="middle" class="step">GL_TEXTURE_2D</text>
  
  <!-- U Texture -->
  <rect x="270" y="385" width="150" height="75" class="texture-bg"/>
  <text x="345" y="405" text-anchor="middle" class="step">U分量纹理(色度)</text>
  <text x="345" y="420" text-anchor="middle" class="api">glTexParameteri()</text>
  <text x="345" y="435" text-anchor="middle" class="step">GL_LINEAR过滤</text>
  <text x="345" y="450" text-anchor="middle" class="step">GL_CLAMP_TO_EDGE</text>
  
  <!-- V Texture -->
  <rect x="440" y="385" width="150" height="75" class="texture-bg"/>
  <text x="515" y="405" text-anchor="middle" class="step">V分量纹理(色度)</text>
  <text x="515" y="420" text-anchor="middle" class="step">纹理包装模式</text>
  <text x="515" y="435" text-anchor="middle" class="step">线性插值过滤</text>
  <text x="515" y="450" text-anchor="middle" class="step">边缘夹紧</text>
  
  <!-- Watermark Texture -->
  <rect x="610" y="385" width="150" height="75" class="texture-bg"/>
  <text x="685" y="405" text-anchor="middle" class="step">水印纹理(可选)</text>
  <text x="685" y="420" text-anchor="middle" class="api">stbi_load()</text>
  <text x="685" y="435" text-anchor="middle" class="step">RGBA格式</text>
  <text x="685" y="450" text-anchor="middle" class="step">Alpha混合</text>
  
  <!-- 阶段4: 帧渲染流程 -->
  <rect x="50" y="490" width="1300" height="200" class="phase-bg"/>
  <text x="70" y="510" class="phase-title">阶段4: 每帧渲染流程 (renderFrame)</text>
  
  <!-- YUV Data Update -->
  <rect x="100" y="525" width="180" height="85" class="yuv-bg"/>
  <text x="190" y="545" text-anchor="middle" class="step">更新YUV纹理数据</text>
  <text x="190" y="560" text-anchor="middle" class="api">glTexImage2D()</text>
  <text x="190" y="575" text-anchor="middle" class="step">Y: 全分辨率</text>
  <text x="190" y="590" text-anchor="middle" class="step">U/V: 1/4分辨率</text>
  <text x="190" y="605" text-anchor="middle" class="step">GL_LUMINANCE格式</text>
  
  <!-- Viewport Setup -->
  <rect x="300" y="525" width="180" height="85" class="render-bg"/>
  <text x="390" y="545" text-anchor="middle" class="step">视口与坐标计算</text>
  <text x="390" y="560" text-anchor="middle" class="api">eglQuerySurface()</text>
  <text x="390" y="575" text-anchor="middle" class="step">保持宽高比缩放</text>
  <text x="390" y="590" text-anchor="middle" class="step">居中显示计算</text>
  <text x="390" y="605" text-anchor="middle" class="step">归一化坐标</text>
  
  <!-- Rendering Setup -->
  <rect x="500" y="525" width="180" height="85" class="render-bg"/>
  <text x="590" y="545" text-anchor="middle" class="step">渲染状态设置</text>
  <text x="590" y="560" text-anchor="middle" class="api">glClear()</text>
  <text x="590" y="575" text-anchor="middle" class="api">glUseProgram()</text>
  <text x="590" y="590" text-anchor="middle" class="step">清除颜色缓冲区</text>
  <text x="590" y="605" text-anchor="middle" class="step">激活着色器程序</text>
  
  <!-- Texture Binding -->
  <rect x="700" y="525" width="180" height="85" class="render-bg"/>
  <text x="790" y="545" text-anchor="middle" class="step">纹理单元绑定</text>
  <text x="790" y="560" text-anchor="middle" class="api">glActiveTexture()</text>
  <text x="790" y="575" text-anchor="middle" class="api">glUniform1i()</text>
  <text x="790" y="590" text-anchor="middle" class="step">Y→单元0, U→单元1</text>
  <text x="790" y="605" text-anchor="middle" class="step">V→单元2, 水印→单元3</text>
  
  <!-- Vertex Attributes -->
  <rect x="900" y="525" width="180" height="85" class="render-bg"/>
  <text x="990" y="545" text-anchor="middle" class="step">顶点属性设置</text>
  <text x="990" y="560" text-anchor="middle" class="api">glVertexAttribPointer()</text>
  <text x="990" y="575" text-anchor="middle" class="api">glEnableVertexAttribArray()</text>
  <text x="990" y="590" text-anchor="middle" class="step">位置属性(location=0)</text>
  <text x="990" y="605" text-anchor="middle" class="step">纹理坐标(location=1)</text>
  
  <!-- Draw Call -->
  <rect x="1100" y="525" width="180" height="85" class="render-bg"/>
  <text x="1190" y="545" text-anchor="middle" class="step">绘制与缓冲区交换</text>
  <text x="1190" y="560" text-anchor="middle" class="api">glDrawArrays()</text>
  <text x="1190" y="575" text-anchor="middle" class="api">eglSwapBuffers()</text>
  <text x="1190" y="590" text-anchor="middle" class="step">GL_TRIANGLE_STRIP</text>
  <text x="1190" y="605" text-anchor="middle" class="step">显示渲染结果</text>
  
  <!-- 阶段5: 着色器处理流程 -->
  <rect x="50" y="710" width="1300" height="140" class="phase-bg"/>
  <text x="70" y="730" class="phase-title">阶段5: GPU着色器处理流程</text>
  
  <!-- Vertex Processing -->
  <rect x="100" y="745" width="200" height="95" class="shader-bg"/>
  <text x="200" y="765" text-anchor="middle" class="step">顶点着色器处理</text>
  <text x="200" y="780" text-anchor="middle" class="step">输入: aPosition, aTexCoord</text>
  <text x="200" y="795" text-anchor="middle" class="step">输出: gl_Position, vTexCoord</text>
  <text x="200" y="810" text-anchor="middle" class="step">坐标变换与传递</text>
  <text x="200" y="825" text-anchor="middle" class="step">四边形顶点处理</text>
  
  <!-- Rasterization -->
  <rect x="320" y="745" width="200" height="95" class="render-bg"/>
  <text x="420" y="765" text-anchor="middle" class="step">光栅化阶段</text>
  <text x="420" y="780" text-anchor="middle" class="step">三角形装配</text>
  <text x="420" y="795" text-anchor="middle" class="step">像素生成</text>
  <text x="420" y="810" text-anchor="middle" class="step">纹理坐标插值</text>
  <text x="420" y="825" text-anchor="middle" class="step">片段生成</text>
  
  <!-- Fragment Processing -->
  <rect x="540" y="745" width="200" height="95" class="shader-bg"/>
  <text x="640" y="765" text-anchor="middle" class="step">片段着色器处理</text>
  <text x="640" y="780" text-anchor="middle" class="step">YUV纹理采样</text>
  <text x="640" y="795" text-anchor="middle" class="step">YUV→RGB颜色转换</text>
  <text x="640" y="810" text-anchor="middle" class="step">水印Alpha混合</text>
  <text x="640" y="825" text-anchor="middle" class="step">输出最终颜色</text>
  
  <!-- Color Conversion -->
  <rect x="760" y="745" width="200" height="95" class="yuv-bg"/>
  <text x="860" y="765" text-anchor="middle" class="step">YUV颜色空间转换</text>
  <text x="860" y="780" text-anchor="middle" class="step">Y: 亮度分量</text>
  <text x="860" y="795" text-anchor="middle" class="step">U/V: 色度分量偏移</text>
  <text x="860" y="810" text-anchor="middle" class="step">标准转换矩阵</text>
  <text x="860" y="825" text-anchor="middle" class="step">R/G/B最终输出</text>
  
  <!-- 流程箭头 -->
  <!-- EGL初始化流程 -->
  <path d="M 280 122 L 300 122" class="process-flow"/>
  <path d="M 480 122 L 500 122" class="process-flow"/>
  <path d="M 680 122 L 700 122" class="process-flow"/>
  
  <!-- 着色器编译流程 -->
  <path d="M 300 272 L 320 272" class="process-flow"/>
  <path d="M 520 272 L 540 272" class="process-flow"/>
  
  <!-- 纹理初始化流程 -->
  <path d="M 250 422 L 270 422" class="process-flow"/>
  <path d="M 420 422 L 440 422" class="process-flow"/>
  <path d="M 590 422 L 610 422" class="process-flow"/>
  
  <!-- 渲染流程 -->
  <path d="M 280 567 L 300 567" class="process-flow"/>
  <path d="M 480 567 L 500 567" class="process-flow"/>
  <path d="M 680 567 L 700 567" class="process-flow"/>
  <path d="M 880 567 L 900 567" class="process-flow"/>
  <path d="M 1080 567 L 1100 567" class="process-flow"/>
  
  <!-- GPU处理流程 -->
  <path d="M 300 792 L 320 792" class="process-flow"/>
  <path d="M 520 792 L 540 792" class="process-flow"/>
  <path d="M 740 792 L 760 792" class="process-flow"/>
  
  <!-- 垂直连接线 -->
  <path d="M 640 330 L 640 350" class="data-flow"/>
  <path d="M 400 470 L 400 490" class="data-flow"/>
  <path d="M 640 690 L 640 710" class="data-flow"/>
  
  <!-- 关键API说明 -->
  <rect x="50" y="870" width="1300" height="110" style="fill: #f8f9fa; stroke: #6c757d; stroke-width: 1;"/>
  <text x="70" y="890" class="phase-title">关键OpenGL ES API调用总结：</text>
  
  <text x="70" y="910" class="step">• EGL初始化: eglGetDisplay() → eglInitialize() → eglChooseConfig() → eglCreateContext() → eglCreateWindowSurface() → eglMakeCurrent()</text>
  <text x="70" y="925" class="step">• 着色器编译: glCreateShader() → glShaderSource() → glCompileShader() → glCreateProgram() → glAttachShader() → glLinkProgram()</text>
  <text x="70" y="940" class="step">• 纹理操作: glGenTextures() → glBindTexture() → glTexParameteri() → glTexImage2D() → glActiveTexture() → glUniform1i()</text>
  <text x="70" y="955" class="step">• 渲染绘制: glClear() → glUseProgram() → glVertexAttribPointer() → glEnableVertexAttribArray() → glDrawArrays() → eglSwapBuffers()</text>
  <text x="70" y="970" class="step">• 资源清理: glDeleteTextures() → glDeleteProgram() → eglTerminate()</text>
  
</svg>